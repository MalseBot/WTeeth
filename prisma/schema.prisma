datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  password  String
  role      Role
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sessions  Session[]
}

enum Role {
  Doctor
  Nurse
}

model Patient {
  id           String        @id @default(cuid())
  name         String        
  age          Int
  address      String
  bloodType    String
  phone        String
  gender       Gender        @default(Male)
  note         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  @@unique([id, name])
}

enum Gender {
  Male
  Female
}

model Media {
  id            String      @id @default(cuid())
  url           String
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId String
  createdAt     DateTime    @default(now())
}

model Appointment {
  id           String      @id @default(cuid())
  patientId    String
  patientName  String
  date         DateTime
  status       String      @default("Scheduled")
  prescription String
  medicine     String
  operation    String
  payment      Float
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  patient      Patient     @relation(fields: [patientId,patientName], references: [id,name], onDelete: Cascade)
  materials    Materials[]
  media        Media[] // <-- New relation

  @@index([patientId,patientName])
}

enum AppointmentStatus {
  Scheduled
  Completed
  Cancelled
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum ItemType {
  Unit
  Gram
  Milliliter
}

model Materials {
  id            String      @id @default(cuid())
  name          String
  type          ItemType    @default(Unit)
  quantity      Int
  createdAt     DateTime    @default(now())
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId String
  storage       Storage     @relation(fields: [name], references: [name], onDelete: Cascade)
}

model Storage {
  id            String      @id @default(cuid())
  name          String      @unique
  type          ItemType    @default(Unit)
  quantity      Int
  currentAmount Int         @default(0)
  buyDate       DateTime
  shortageLimit Int
  price         Int
  seller        String
  updatedAt     DateTime    @updatedAt
  materials     Materials[]
}

enum budgetType {
  income
  expense
}

model Budget {
  id            String      @id @default(cuid())
  name          String      @unique
  type          budgetType
  repeatable    Boolean     @default(false)
  info         String
  price         Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([name])
}